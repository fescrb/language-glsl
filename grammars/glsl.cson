'fileTypes': [
  'vs'
  'fs'
  'gs'
  'vsh'
  'fsh'
  'gsh'
  'csh'
  'vshader'
  'fshader'
  'gshader'
  'cshader'
  'vert'
  'frag'
  'geom'
  'comp'
  'f.glsl'
  'v.glsl'
  'g.glsl'
  'c.glsl'
  'glsl'
]
'foldingStartMarker': '/\\*\\*|\\{\\s*$'
'foldingStopMarker': '\\*\\*/|^\\s*\\}'
'name': 'GLSL'
'patterns': [
  {
    'match': '\\.(x|y|z|w|r|g|b|a){1,4}'
    'name': 'keyword.operator.glsl'
  }
  {
    'match': '\\b(break|case|continue|default|discard|do|else|for|if|return|switch|while)\\b'
    'name': 'keyword.control.glsl'
  }
  {
    'match': '\\b(void|bool|u?int|float|[b|i|u]?vec[2|3|4]|mat[2|3|4](x[2|3|4])?|[i|u]?sampler[1|2|3]D|[i|u]?sampler(Cube|Buffer)|[i|u]?sampler2DRect(Shadow)?|[i|u]?sampler[1|2]D(Array)?(Shadow)?|[i|u]?sampler2DMS(Array)?|struct|[i|u]?image[1|2|3]D|[i|u]?imageCube|[i|u]?image2D[Rect|Array]|[i|u]?image1DArray|[i|u]?imageBuffer|[i|u]?imageMS(Array)?)\\b'
    'name': 'storage.type.glsl'
  }
  {
    'match': '\\b(attribute|centroid|sample|patch|const|flat|in|inout|invariant|noperspective|out|smooth|uniform|varying|buffer|shared|lowp|mediump|highp|volatile|coherent|restrict|readonly|writeonly)\\b'
    'name': 'storage.modifier.glsl'
  }
  {
    'match': '\\b(gl_(Back)?(Secondary)?Color|gl_BackLight(Model)?Product|gl_BackMaterial|gl_Clip(Distance|Plane|Vertex)|gl_DepthRange(Parameters)?|gl_(Eye|Object)Plane[Q|R|S|T]|gl_Fog(Coord|FragCoord|Parameters)?|gl_Frag(Color|Coord|Dat|Depth)|gl_Front((Secondary)?Color|Facing|Light(Model)?Product|Material)|gl_InstanceID|gl_Layer|gl_LightModel(Products)?|gl_Light(Products|Source)|gl_Light(Model|Source|Material)Parameters|gl_(ModelView(Projection)?|Projection)Matrix(Inverse)?(Transpose)?|gl_MultiTexCoord[0-7]|gl_Normal(Matrix|Scale)?|gl_Point(Coord|Parameters|Size)?|gl_Position|gl_PrimitiveIDIn|gl_TexCoord|gl_Texture(EnvColor|Matrix(Inverse)?(Transpose)?)|gl_Vertex(ID)?|gl_NumWorkGroups|gl_(WorkGroup|(Local|Global)Invocation)ID|gl_LocalInvocationIndex)\\b'
    'name': 'support.variable.glsl'
  }
  {
    'match': '\\b(gl_MaxClipPlanes|gl_MaxCombinedTextureImageUnits|gl_MaxDrawBuffers|gl_MaxFragmentUniformComponents|gl_MaxLights|gl_MaxTextureCoords|gl_MaxTextureImageUnits|gl_MaxTextureUnits|gl_MaxVaryingFloats|gl_MaxVertexAttribs|gl_MaxVertexTextureImageUnits|gl_MaxVertexUniformComponents|gl_WorkGroupSize)\\b'
    'name': 'support.constant.glsl'
  }
  {
    'match': '\\b(abs|acos|all|any|asin|atan|ceil|clamp|cos|cross|degrees|dFdx|dFdy|distance|dot|equal|exp(2)?|faceforward|floor|fract|ftransform|fwidth|greaterThan(Equal)?|inversesqrt|length|lessThan|lessThanEqual|log(2)?|matrixCompMult|max|min|mix|mod|noise[1-4]|normalize|not(Equal)?|outerProduct|pow|radians|reflect|refract|shadow[1|2]D(Proj)?(Lod)?|sign|sin|smoothstep|sqrt|step|tan|texture[1|2|3]D(Proj)?(Lod)?|textureCube(Lod)?|transpose|image(Size|Load|Store)|(imageA|a)tomic(Add|Min|Max|And|Or|Xor|Exchange|CompSwap))\\b'
    'name': 'support.function.glsl'
  }
  {
    'match': '\\b(asm|double|enum|extern|goto|inline|long|short|sizeof|static|typedef|union|unsigned)\\b'
    'name': 'invalid.illegal.glsl'
  }
  {
    'comment': 'glslify export statements'
    'begin': '#(pragma glslify:)\\s*(export)(\\()([^(]+)(\\))'
    'beginCaptures': {
      '1': { 'name': 'meta.preprocessor.keyword.import.define.glsl' }
      '2': { 'name': 'keyword.operator.glsl' }
      '4': { 'name': 'entity.name.function.glsl' }
    }
    'end': '\\n'
  }
  {
    'comment': 'glslify require statements'
    'begin': '#(pragma glslify:)([^=]+)(\\s*=\\s*)?(require)(\\()([^(]+)(\\))'
    'beginCaptures': {
      '1': { 'name': 'meta.preprocessor.keyword.import.define.glsl' }
      '2': { 'name': 'entity.name.function.glsl' }
      '3': { 'name': 'operator.glsl' }
      '4': { 'name': 'keyword.operator.glsl' }
      '6': { 'name': 'string.quoted.double' }
    }
    'end': '\\n'
  }
  {
    'include': 'source.c'
  }
]
'scopeName': 'source.glsl'
